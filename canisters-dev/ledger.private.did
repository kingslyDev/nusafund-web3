type Tokens = record {
    e8s: nat64;
};

type TimeStamp = record {
    timestamp_nanos: nat64;
};

type AccountIdentifier = text;
type CampaignIdentifier = text;
type TransactionType = variant {
    Donation;
    Withdrawal;
    Transfer;
};

type PrivateTransaction = record {
    id: text;
    campaign_id: CampaignIdentifier;
    sender: AccountIdentifier;
    recipient: AccountIdentifier;
    amount: Tokens;
    transaction_type: TransactionType;
    timestamp: TimeStamp;
    memo: opt text;
    status: variant {
        Pending;
        Completed;
        Failed;
    };
};

type LedgerInitPayload = record {
    initial_campaigns: vec record { CampaignIdentifier; Tokens };
    max_transaction_size: opt nat64;
    admin_principal: principal;
};

service: (LedgerInitPayload) -> {
    recordPrivateTransaction: (PrivateTransaction) -> (text);
    getPrivateTransactionsByCampaign: (CampaignIdentifier) -> (vec PrivateTransaction) query;
    calculateTotalCampaignFunds: (CampaignIdentifier) -> (Tokens) query;
    withdrawFunds: (CampaignIdentifier, Tokens, AccountIdentifier) -> (text);
}